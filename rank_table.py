from bisect import bisect
from typing import Callable

# Класифікаційні таблиці взято з офіційного документу:
# https://zakon.rada.gov.ua/laws/show/z1018-17/conv#n271

time_table = [
    (0,    []),
    (1,    [0.00, 0.00, 0.00, 0.00, 1.14]),
    (2,    [0.00, 0.00, 0.00, 0.00, 1.23]),
    (3,    [0.00, 0.00, 0.00, 1.05, 1.29]),
    (4,    [0.00, 0.00, 0.00, 1.08, 1.32]),
    (5,    [0.00, 0.00, 0.00, 1.11, 1.35]),
    (6,    [0.00, 0.00, 0.00, 1.14, 1.38]),
    (8,    [0.00, 0.00, 0.00, 1.17, 1.42]),
    (10,   [0.00, 0.00, 1.00, 1.20, 1.46]),
    (13,   [0.00, 0.00, 1.02, 1.23, 1.50]),
    (16,   [0.00, 0.00, 1.05, 1.26, 1.54]),
    (20,   [0.00, 0.00, 1.08, 1.29, 1.58]),
    (25,   [0.00, 0.00, 1.11, 1.32, 1.62]),
    (32,   [0.00, 0.00, 1.14, 1.35, 1.66]),
    (36,   [0.00, 1.00, 1.17, 1.38, 1.70]),
    (50,   [0.00, 1.02, 1.20, 1.42, 1.74]),
    (63,   [0.00, 1.05, 1.23, 1.46, 1.79]),
    (80,   [0.00, 1.08, 1.26, 1.50, 1.84]),
    (100,  [0.00, 1.11, 1.29, 1.54, 1.89]),
    (120,  [1.00, 1.14, 1.32, 1.58, 1.94]),
    (160,  [1.02, 1.17, 1.35, 1.62, 1.99]),
    (200,  [1.05, 1.20, 1.38, 1.66, 2.04]),
    (250,  [1.08, 1.23, 1.42, 1.70, 1.09]),
    (320,  [1.11, 1.26, 1.46, 1.74, 2.14]),
    (400,  [1.14, 1.29, 1.50, 1.79, 2.19]),
    (500,  [1.17, 1.32, 1.54, 1.84, 2.24]),
    (630,  [1.20, 1.35, 1.58, 1.89, 9999]),
    (800,  [1.23, 1.38, 1.62, 1.94, 9999]),
    (1000, [1.26, 1.41, 1.66, 1.99, 9999]),
    (1100, [1.29, 1.44, 1.70, 2.04, 9999]),
    (1200, [1.31, 1.47, 1.74, 2.09, 9999]),
]

point_table = [
    (0,    []),
    (1,    [9.00, 9.00, 9.00, 9.00, 0.88]),
    (2,    [9.00, 9.00, 9.00, 9.00, 0.82]),
    (3,    [9.00, 9.00, 9.00, 9.00, 0.80]),
    (4,    [9.00, 9.00, 9.00, 0.94, 0.78]),
    (5,    [9.00, 9.00, 9.00, 0.90, 0.74]),
    (6,    [9.00, 9.00, 9.00, 0.88, 0.72]),
    (8,    [9.00, 9.00, 9.00, 0.86, 0.70]),
    (10,   [9.00, 9.00, 9.00, 0.84, 0.68]),
    (13,   [9.00, 9.00, 0.97, 0.82, 0.66]),
    (16,   [9.00, 9.00, 0.95, 0.80, 0.64]),
    (20,   [9.00, 9.00, 0.92, 0.78, 0.62]),
    (25,   [9.00, 9.00, 0.90, 0.76, 0.60]),
    (32,   [9.00, 9.00, 0.88, 0.74, 0.58]),
    (36,   [9.00, 1.00, 0.86, 0.72, 0.57]),
    (50,   [9.00, 0.97, 0.84, 0.70, 0.56]),
    (63,   [9.00, 0.94, 0.82, 0.68, 0.55]),
    (80,   [9.00, 0.92, 0.80, 0.66, 0.54]),
    (100,  [9.00, 0.90, 0.78, 0.64, 0.53]),
    (120,  [1.00, 0.88, 0.76, 0.62, 0.52]),
    (160,  [0.97, 0.86, 0.74, 0.60, 0.51]),
    (200,  [0.94, 0.84, 0.72, 0.58, 0.50]),
    (250,  [0.92, 0.82, 0.70, 0.57, 0.49]),
    (320,  [0.90, 0.80, 0.68, 0.56, 0.48]),
    (400,  [0.88, 0.78, 0.66, 0.55, 0.47]),
    (500,  [0.86, 0.76, 0.64, 0.54, 0.46]),
    (630,  [0.84, 0.74, 0.62, 0.53, -1.0]),
    (800,  [0.82, 0.72, 0.60, 0.52, -1.0]),
    (1000, [0.78, 0.70, 0.58, 0.51, -1.0]),
    (1100, [0.76, 0.68, 0.56, 0.50, -1.0]),
    (1200, [0.74, 0.66, 0.54, 0.49, -1.0]),
]


class RankTable:
    def __init__(self, by_time=True):
        self.by_time = by_time
        self.rank_table = time_table if by_time else point_table

    def get_course_rules(self, course_value: float) -> [float]:
        idx = bisect(self.rank_table, course_value, key=lambda v: v[0])
        if idx >= len(self.rank_table):
            return self.rank_table[-1][1]
        if idx <= 0:
            idx = 1
        return self.rank_table[idx - 1][1]

    def estimate_rank(self, ratio: float, is_junior: bool,
                      course_rules: [float]) -> str:
        if self.by_time:
            return self.estimate_rank_impl(ratio, is_junior,
                                           lambda a, b: a <= b,
                                           course_rules)
        return self.estimate_rank_impl(ratio, is_junior,
                                       lambda a, b: a >= b,
                                       course_rules)

    def estimate_rank_impl(self, ratio: float, is_junior: bool,
                           is_better: Callable[[float, float], bool],
                           course_rules: [float]) -> str:
        if not course_rules:
            return ""
        if is_better(ratio, course_rules[0]):
            return "КМСУ"
        if is_better(ratio, course_rules[1]):
            return "І"
        if not is_junior:
            if is_better(ratio, course_rules[2]):
                return "ІІ"
            if is_better(ratio, course_rules[3]):
                return "ІІІ"
        else:
            if is_better(ratio, course_rules[2]):
                return "І-ю"
            if is_better(ratio, course_rules[3]):
                return "ІІ-ю"
            if is_better(ratio, course_rules[4]):
                return "ІІІ-ю"
        return ""
